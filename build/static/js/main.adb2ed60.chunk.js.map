{"version":3,"sources":["App.js","reportWebVitals.js","store/index.js","index.js"],"names":["Progress","React","lazy","Login","Register","App","dispatch","useDispatch","isAuth","useSelector","state","userIsAuth","useEffect","token","localStorage","getItem","fetch","process","method","mode","headers","auth","Accept","then","res","ok","json","user","type","username","catch","err","console","log","fallback","class","role","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","taskList","store","createStore","action","newTaskListAfterUpdate","map","task","_id","taskNewData","newTaskListAfterDelete","filter","ReactDOM","render","document","getElementById"],"mappings":"wPASMA,EAAWC,IAAMC,MAAK,kBAAM,gCAC5BC,EAAQF,IAAMC,MAAK,kBAAM,gCACzBE,EAAWH,IAAMC,MAAK,kBAAM,gCA4DnBG,MA3Df,WACE,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAWA,EAAMC,cAmC5C,OAlCAC,qBAAU,WACR,IAAIJ,EAAJ,CAGA,IAAMK,EAAQC,aAAaC,QAAQ,SAC/BF,GACFG,MAAMC,uCAAyC,CAC7CC,OAAQ,MACRC,KAAM,OACNC,QAAS,CACPC,KAAMR,EACNS,OAAQ,sBAGTC,MAAK,SAACC,GACL,GAAIA,EAAIC,GACN,OAAcD,EAAIE,OAElB,MAAMF,EAAIE,UAGbH,MAAK,SAACI,GACLrB,EAAS,CACPsB,KAAM,QACNjB,YAAY,EACZkB,SAAUF,EAAKE,cAGlBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAGjB,CAACvB,IAGF,cAAC,IAAD,UACE,cAAC,WAAD,UACE,eAAC,WAAD,CACE0B,SACE,qBAAKC,MAAM,yBAAyBC,KAAK,SAAzC,SACE,sBAAMD,MAAM,UAAZ,0BAHN,UAOE,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAlB,SACG9B,EAAS,cAACR,EAAD,IAAwB,cAACG,EAAD,MAEpC,cAAC,IAAD,CAAOmC,KAAK,YAAZ,SACE,cAAClC,EAAD,cCnDGmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCNRO,EAAY,CAChBpC,YAAY,EACZkB,SAAU,GACVmB,SAAU,IA2DGC,EAFDC,aAvDM,WAAgC,IAA/BxC,EAA8B,uDAAtBqC,EAAWI,EAAW,uCACjD,OAAQA,EAAOvB,MACb,IAAK,QAML,IAAK,SACH,MAAO,CACLjB,WAAYwC,EAAOxC,WACnBkB,SAAUsB,EAAOtB,SACjBmB,SAAUtC,EAAMsC,UAEpB,IAAK,aACH,OAAOD,EAET,IAAK,gBACH,MAAO,CACLpC,WAAYD,EAAMC,WAClBkB,SAAUnB,EAAMmB,SAChBmB,SAAUG,EAAOH,UAErB,IAAK,gBACH,IAAII,EAAyB1C,EAAMsC,SAASK,KAAI,SAACC,GAC/C,OAAIA,EAAKC,MAAQJ,EAAOG,MACtBtB,QAAQC,IAAIqB,EAAKC,KACVJ,EAAOK,aAEPF,KAIX,OADAtB,QAAQC,IAAImB,GACL,CACLzC,WAAYD,EAAMC,WAClBkB,SAAUnB,EAAMmB,SAChBmB,SAAUI,GAGd,IAAK,gBACHpB,QAAQC,IAAI,UAAYkB,EAAOG,MAC/B,IAAIG,EAAyB/C,EAAMsC,SAASU,QAC1C,SAACJ,GAAD,OAAUA,EAAKC,MAAQJ,EAAOG,QAEhC,MAAO,CACL3C,WAAYD,EAAMC,WAClBkB,SAAUnB,EAAMmB,SAChBmB,SAAUS,GAMhB,OAAO/C,KCpDTiD,IAASC,OACP,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFY,SAASC,eAAe,SAM1BvB,M","file":"static/js/main.adb2ed60.chunk.js","sourcesContent":["import React ,{  Fragment, Suspense, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n// import Progress from \"./components/Layout/Layout\";\n// import Login from \"./components/Login/Login\";\n// import Register from \"./components/Register/Register\";\n\nconst Progress = React.lazy(() => import(\"./components/Layout/Layout\"));\nconst Login = React.lazy(() => import(\"./components/Login/Login\"));\nconst Register = React.lazy(() => import(\"./components/Register/Register\"));\nfunction App() {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.userIsAuth);\n  useEffect(() => {\n    if (isAuth) {\n      return;\n    }\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetch(process.env.REACT_APP_BACKEND_URL + \"/\", {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          auth: token,\n          Accept: \"application/json\",\n        },\n      })\n        .then((res) => {\n          if (res.ok) {\n            return (res = res.json());\n          } else {\n            throw res.json();\n          }\n        })\n        .then((user) => {\n          dispatch({\n            type: \"login\",\n            userIsAuth: true,\n            username: user.username,\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, [isAuth]);\n\n  return (\n    <Router>\n      <Fragment>\n        <Suspense\n          fallback={\n            <div class=\"spinner-border mx-auto\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          }\n        >\n          <Route exact path=\"/\">\n            {isAuth ? <Progress></Progress> : <Login></Login>}\n          </Route>\n          <Route path=\"/register\">\n            <Register></Register>\n          </Route>\n        </Suspense>\n      </Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from \"redux\";\r\nconst initState = {\r\n  userIsAuth: false,\r\n  username: \"\",\r\n  taskList: [],\r\n};\r\nconst userReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"login\":\r\n      return {\r\n        userIsAuth: action.userIsAuth,\r\n        username: action.username,\r\n        taskList: state.taskList,\r\n      };\r\n    case \"logout\":\r\n      return {\r\n        userIsAuth: action.userIsAuth,\r\n        username: action.username,\r\n        taskList: state.taskList,\r\n      };\r\n    case \"taskAddOne\":\r\n      return initState;\r\n\r\n    case \"taskUpdateAll\":\r\n      return {\r\n        userIsAuth: state.userIsAuth,\r\n        username: state.username,\r\n        taskList: action.taskList,\r\n      };\r\n    case \"taskUpdateOne\":\r\n      let newTaskListAfterUpdate = state.taskList.map((task) => {\r\n        if (task._id === action.task) {\r\n          console.log(task._id)\r\n          return action.taskNewData;\r\n        } else {\r\n          return task;\r\n        }\r\n      });\r\n      console.log(newTaskListAfterUpdate)\r\n      return {\r\n        userIsAuth: state.userIsAuth,\r\n        username: state.username,\r\n        taskList: newTaskListAfterUpdate,\r\n      };\r\n\r\n    case \"taskDeleteOne\":\r\n      console.log(\"task = \" + action.task);\r\n      let newTaskListAfterDelete = state.taskList.filter(\r\n        (task) => task._id !== action.task\r\n      );\r\n      return {\r\n        userIsAuth: state.userIsAuth,\r\n        username: state.username,\r\n        taskList: newTaskListAfterDelete,\r\n      };\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return state;\r\n};\r\nconst store = createStore(userReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}